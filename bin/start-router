#!/usr/bin/env bash

main() {
  if ! is-enabled "${HEROKU_ROUTER_HTTP_PORT}"; then
    at router-disabled
    exec "$@"
  fi

  at router-enabled
  run-router "$@"
}

run-router() {
  declare sentinel=/tmp/router-buildpack-wait
  declare -A pids signals

  # Use named pipe to detect exit of any subprocess.
  rm -f "$sentinel"
  mkfifo "$sentinel"

  if ! is-enabled "${PORT}"; then
    at port-assignment-start
    declare -x PORT=8080
    at "port-assignment-end port=${PORT}"
  else
    at "port-assignment-disabled port=${PORT}"
  fi

  address=$(ip -4 address show eth0|awk '/inet/ {print  $2}'|cut -f1 -d'/')
  if ! is-enabled "${address}"; then
    at set-listen-address-disabled
  else
    at set-listen-address-start
    declare -x BUILDPACK_ROUTER_LISTEN_ADDRESS=${address}
    at "set-listen-address-end address=${BUILDPACK_ROUTER_LISTEN_ADDRESS}"
  fi

  if ! is-enabled "${SERVER_KEY}"; then
    at config-ssl-disabled
  else
    config-ssl
  fi

  config-gen

  # Start processes.
  aux-start router SIGINT nginx-byor -p . -c config/nginx.conf
  app-start SIGTERM "$@"
  pid=$!

  # Don't exit top script until all subprocesses are done.
  trap '' SIGTERM

  # This read will block the process waiting on a msg to be put into the
  # fifo. If any of the processes defined above should exit, a msg will be
  # put into the fifo causing the read operation to un-block. The process
  # putting the msg into the fifo will use it's process name as a msg so that
  # we can print the offending process to stdout.
  declare exit_process
  read exit_process < "$sentinel"
  at "exit process=$exit_process"

  # Remove the FIFO. This allows following writes to simply create a file,
  # rather than blocking because there's nothing reading the other end.
  rm -f "$sentinel"

  # Clean up any running processes.
  # SIGTERM the application's process group (hence the negative PID), just in
  # case something else crashed. If the dyno is shutting down, then SIGTERM
  # has already been sent.
  at "kill-app pid=$pid"
  kill -SIGTERM -$pid

  # Wait for the app to finish.
  at "wait-app pid=$pid"
  wait $pid

  # Kill the auxiliary processes.
  # Send each one SIGHUP which will be translated by the trap in aux-start.
  declare name
  for name in "${!pids[@]}"; do
    at "kill-aux name=$name pid=${pids[$name]} signal=${signals[$name]}"
    kill -SIGHUP "${pids[$name]}"
  done
}

config-ssl() {
  # Load SSL certificate and key into files
  at config-ssl-start
  rm -f config/server.key config/server.cert
  echo "${SERVER_KEY}" > config/server.key
  echo "${SERVER_CERT}" > config/server.cert
  chmod 600 config/server.key config/server.cert
  at config-ssl-end
}

config-gen() {
  # Generate config files
  at config-gen-start
  erb -T '-' config/nginx.conf.erb > config/nginx.conf
  at config-gen-end
}

aux-start() {
  declare name=$1 signal=$2
  shift 2

  (
    at "$name-start"

    # Ignore SIGTERM; this is inherited by the child process.
    trap '' SIGTERM

    # Start child in the background.
    "$@" &

    # Translate SIGHUP to the appropriate signal to stop the child (anything
    # except SIGTERM which is ignored). This *will* cancel the wait and may
    # lead to the outer subshell exiting before the aux process
    trap "kill -$signal $!" SIGHUP

    # Wait for child to finish, either by crash or by $signal
    wait

    # Notify FIFO if this finishes first
    echo "$name" > "$sentinel"

    at "$name-end"
  ) &

  pids[$name]=$!
  signals[$name]=$signal
  at "$name-launched pid=$! signal=$signal"
}

app-start() {
  declare name=app signal=$1
  shift

  (
    at "$name-start"

    # Start child in the background. This is before the trap because
    # the app needs to be able to receive when the dyno broadcasts
    # SIGTERM on shutdown.
    "$@" &

    # Translate SIGHUP to the appropriate signal to stop the child
    # (probably SIGTERM in this case). This *will* cancel the wait and may
    # lead to the outer subshell exiting before the app.
    trap "kill -$signal $!" SIGHUP

    # Ignore SIGTERM because the dyno will broadcast it to all children --
    # there is no need to translate it.
    trap "" SIGTERM

    # Wait for the app to finish, either by crash or by $signal
    wait

    # Notify FIFO if this finishes first
    echo "$name" > $sentinel

    at "$name-end"
  ) &

  at "$name-launched pid=$!"
}

is-enabled() {
  [[ -n "$1" ]]
}

at() {
  echo "buildpack=router at=$*"
}

[[ "$0" != "$BASH_SOURCE" ]] || main "$@"
